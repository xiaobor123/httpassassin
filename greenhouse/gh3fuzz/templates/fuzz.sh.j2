#!/fuzz_bins/utils/sh

ARCH={{arch}}
CMD={{cmd}}
DRYRUN_TIMEOUT={{timeout}}
export PATH=/fuzz_bins/utils:$PATH
export QEMU_SET_ENV="PATH=$PATH,LD_PRELOAD=$LD_PRELOAD"
unset LD_PRELOAD

cd /
/sbin/procd &
/sbin/ubusd &
ln -sf /usr/bin/util-linux-flock /usr/bin/flock
echo "WAUST-8WAUDT" > /etc/TZ
mkdir /var/run
touch /var/run/ubus.sock
mkdir -p /tmp/sysapihttpd/lock
touch /tmp/sysapihttpd/lock/sysapihttpd.lock.accept
mkdir -p /tmp/run
touch /tmp/run/sysapihttpd.pid
/usr/sbin/datacenter &
/usr/sbin/plugincenter &
/usr/bin/spawn-fcgi -a 127.0.0.1 -p 8920 -U nobody -C 0 -F 2 -- /usr/bin/fcgi-cgi -c 2
touch /GH_SUCCESSFUL_BIND
/sbin/uci set xiaoqiang.common.INITTED=1
/sbin/uci commit


cleanup () {
	# sometimes the process creates a fork which stays alive
	sleep $DRYRUN_TIMEOUT
	ps | /fuzz_bins/utils/grep 'qemu-static' | /fuzz_bins/utils/grep -v 'grep' > /tmp/pids
	out=$(cat /tmp/pids)
	if [ -n "$out" ]; then
		while read -r line; do
	        	pid=$(echo $line | /fuzz_bins/utils/awk '{print $1}')
	        	echo "Process still exists: $pid" >> /tmp/log
	        	kill -9 $pid
		done < /tmp/pids
	fi
}

while true; do
  # 执行 curl 命令
  curl 172.17.0.3 >/dev/null 2>&1
  
  # 等待5秒
  sleep 5  
done &

/fuzz_bins/utils/mkdir -p /scratch
/fuzz_bins/utils/cp -a /fuzz/* /scratch
cd /scratch
cp /qemu-$ARCH-static /qemu-static
cp /fuzz_bins/qemu/afl-qemu-trace-$ARCH /usr/bin/afl-qemu-trace

# setup the execution environment by running the background scripts
echo "[Fuzz] Launch background scripts..."
{{bg_block}}

# run the server once for some initialization
echo "[Fuzz] Dry run the server..."
output=$(/fuzz_bins/utils/timeout -s SIGTERM $DRYRUN_TIMEOUT /fuzz_bins/ghup_bins/unshare_pid /qemu-static -hackbind -hackproc -execve "/qemu-static -hackbind -hackproc" -- $CMD  2>&1)
result=$(/fuzz_bins/utils/ls / | /fuzz_bins/utils/grep 'GH_SUCCESSFUL_BIND')
echo $result
if [ -z "$result" ]
then
	echo "[GH_ERROR] Fail to launch the server normally!!!"
	echo $output
	echo "[Fuzz] Trying without unshare"
	output=$(/fuzz_bins/utils/timeout -s SIGKILL $DRYRUN_TIMEOUT /qemu-static -hackbind -hackproc -execve "/qemu-static -hackbind -hackproc" -- $CMD 2>&1  && cleanup)
	result=$(/fuzz_bins/utils/ls / | /fuzz_bins/utils/grep 'ps\')
	echo $result
	if [ -z "$result" ]
	then
		echo "[GH_ERROR] Fail to launch the server normally!!!"
		echo $output
		echo "[GH_ERROR] Giving up"
		exit
	fi
fi

# get dry run output and extract the return address
echo "[Fuzz] Dry run the server again to obtain the address for forkserver..."
output=$(GH_DRYRUN=1 /fuzz_bins/utils/timeout -s SIGTERM $DRYRUN_TIMEOUT /fuzz_bins/ghup_bins/unshare_pid /usr/bin/afl-qemu-trace -hookhack -hackbind -hackproc -execve "/qemu-static -hackbind -hackproc" -- $CMD)
addr_str=$(echo "$output" | /fuzz_bins/utils/timeout -s SIGKILL $DRYRUN_TIMEOUT /fuzz_bins/utils/grep --line-buffered 'return addr')
#addr_str='return addr 0x0000005500027688'
echo $addr_str
if [ -z "$addr_str" ]
then
	echo "[GH_ERROR] something wrong with afl+GH!!!"
	echo $output
	echo "[Fuzz] Trying without unshare"
	output=$(GH_DRYRUN=1 /fuzz_bins/utils/timeout -s SIGKILL $DRYRUN_TIMEOUT /usr/bin/afl-qemu-trace -hookhack -hackbind -hackproc -execve "/qemu-static -hackbind -hackproc" -- $CMD 2>&1 && cleanup)
	addr_str=$(echo "$output" | /fuzz_bins/utils/timeout -s SIGKILL $DRYRUN_TIMEOUT /fuzz_bins/utils/grep --line-buffered 'return addr')
	echo $addr_str
	if [ -z "$addr_str" ]
	then
		echo "[GH_ERROR] something wrong with afl+GH!!!"
		echo $output
		echo "[GH_ERROR] Giving up"
		exit
	fi
fi
addr=$(echo $addr_str | /fuzz_bins/utils/cut -d' ' -f3)
#addr='0x0000005500027688'
if [ -z "$addr" ]
then
	echo "[GH_ERROR] failed to extract the fork address from QEMU's output!!!"
	exit
fi

# backup fork addr so that minify.sh can reuse it
echo 0x0000005500027688 > /scratch/addr
#echo $addr

# launch the fuzzer
echo "[Fuzz] Start Fuzzing..."
export AFL_ENTRYPOINT=$addr
#export AFL_ENTRYPOINT=0x0000005500027688
export LD_BIND_LAZY=1
export AFL_NO_AFFINITY=1
#export AFL_CUSTOM_PYTHON_MUTATOR=/token_passer.py
#export AFL_DEBUG=0
exec /fuzz_bins/bin/afl-fuzz -t 1000 -Q -x /scratch/dictionary -i /scratch/seeds -o /scratch/output -- $CMD

